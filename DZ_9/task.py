# 1. Вирахувати дисперсію статистичного ряду. Я взяла довільне завдвння.

data = [222, 219, 224, 220,	218, 217, 221, 220, 215, 218, 223, 225,
        220, 226, 221, 216, 211, 219, 220, 221,	222, 218, 221, 219]


def dispersion(i):
    dispersion_var = (sum([x ** 2 for x in i]) / len(i)) - \
                     (sum(i) / len(i)) ** 2
    return dispersion_var


print(round(dispersion(data), 2))

# думаю в цьому завдані є приклад ітерації елементів списку через цикл for


# 2. В систему поступають дані по продажам понедільно. Перевести продажі з гривень в долари, вивести загальну
# суму продаж за тиждень.

sale = [[98468, 85578, 84588, 85458, 65885], [74858, 45948, 69898, 85698, 95995], [86758, 86335, 99488, 56969, 84456],
        [85477, 59969, 59699, 90586, 69785]]

usd = 38.98

weekly_sales_usd = [round(num, 2) for num in [sum(i) for i in [[x / usd for x in i] for i in sale]]]
print(weekly_sales_usd)

# це завдвння вирішила через цикли в циклах

# 3. В базу поступають дані оплат клієнтів. В дному списку назва компаній в другому суми оплат.
# відібрати компанії з оплатами більше 100 тис.

customers = ["Amazon", "Tesla", "Walmart", "Apple", "Chevron", "Facebook", "IBM", "Sony", "BMW", "Alphabet"]
pay_usd = [75000, 108000, 65000, 98000, 110000, 50000, 120000, 90000, 119000, 76800]

customers_pay = [[i[0], i[1]] for i in list(zip(customers, pay_usd))]
print(customers_pay)

def more_100(n):
    for customer_and_pay_tuple in n:
        if customer_and_pay_tuple[1] > 100000:
            yield i

for i in more_100(zip(customers, pay_usd)):
    print(i)

# задачу прийшлося розбити на три етапи. в першому з'єднала списки у вкладені списки, де значення відвовідають одне одному.
# далі записала функцію що ітерує список по заданій умові і в кінці витягнула через цикл відібрані ітератором значення.
# як зробити всі три кроки в одному рішенні - я не знаю ((

